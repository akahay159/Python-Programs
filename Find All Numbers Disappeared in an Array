Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.
Find all the elements of [1, n] inclusive that do not appear in this array.

Example:
Input:
[4,3,2,7,8,2,3,1]
Output:
[5,6]

Approach 1: Using min and max value
Time Complexity-O(n)
Space Complexity-O(n)
------------------------------------
mylist=[4,3,2,7,8,2,3,1]

def myfunction(mylist):
    result=[]
    minimun = min(mylist)
    maximun = max(mylist)
    for i in range(minimun, maximun + 1):
        if i not in mylist:
            result.append(i)
    return result
print(myfunction(mylist))
------------------------------------
------------------------------------
------------------------------------
Approach 2: Using cummulative sums
Time Complexity-O(n)
Space Complexity-O(1)
------------------------------------
class Mysolution(object):
  def findDispNumber(self,nums):
    for num in nums:
      num=abs(num)
      nums[num-1]=-abs(nums[num-1])
    return [i+1 for i,num in enumerate(nums) i num>0]
------------------------------------
------------------------------------
------------------------------------
